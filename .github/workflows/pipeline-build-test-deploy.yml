name: .NET CI/CD Pipeline

on:
  push:
    branches: 
      - cicd/notification #dev
  pull_request:
    branches:
      - cicd/notification #dev

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Setup .NET Core
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: '8.0'

    - name: Restore dependencies
      working-directory: DualJobDateAPI
      run: dotnet restore DualJobDateAPI.sln

    - name: Build
      working-directory: DualJobDateAPI
      run: dotnet build --no-restore -c Release

    - name: Cache NuGet Packages
      uses: actions/cache@v2
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: ${{ runner.os }}-nuget-

  test:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Setup .NET Core
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: '8.0'

    - name: Run Tests
      working-directory: DualJobDateAPI
      run: |
        dotnet test -c Release DualJobDateAPI.sln --verbosity detailed
      
  build-and-push-docker:
    permissions:
      contents: read
      packages: write
    needs: test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Convert to lowercase
      run: |
        echo "IMAGE_NAME=${IMAGE_NAME@L}" >> "${GITHUB_ENV}"
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./DualJobDateAPI
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:build-develop

  notify_failure:
    name: Benachrichtigung bei Build-Fehler
    runs-on: ubuntu-latest
    needs: [build, test, build-and-push-docker]
    if: failure()
    steps:
      - name: Send Discord Notification on Failure
        run: |
          curl -H "Content-Type: application/json" \
          -X POST \
          -d "{\"content\": \" **Workflow Failed:** ${{ github.workflow }}\n**Branch:** ${{ github.ref_name }}\n**Repository:** ${{ github.repository }}\n**Link:** ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}\"}" \
          ${{ secrets.WEBHOOK_URL }}

  notify_success:
    name: Benachrichtigung bei Build-Success
    runs-on: ubuntu-latest
    needs: [build, test, build-and-push-docker]
    if: success()
    steps:
      - name: Send Discord Notification on Success
        run: |
          curl -H "Content-Type: application/json" \
          -X POST \
          -d "{\"content\": \"âœ… **Workflow succeeded:** ${{ github.workflow }}\n**Branch:** ${{ github.ref_name }}\n**Repository:** ${{ github.repository }}\"}" \
          https://discord.com/api/webhooks/1239289178211225620/vc4Kd8AK6JGGe39rDXDXRSskBwgz8ThF2u3NyF980PrLhOLeb3Mo78Jk6-ZcsbnLb48Z
